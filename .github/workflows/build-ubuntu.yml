#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ubuntu-lucas

on:
  repository_dispatch:
    types: [update_source_code]
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 0 20 * * *
  push:

env:
  REPO_URL: https://github.com/khadas/fenix
  REPO_BRANCH: master
  CONFIG_FILE: .config
  WORKERDIR: /home/runner/work/ka-vim3-ubuntu/ka-vim3-ubuntu/project/
  PACKAGED_OUTPUTPATH: /home/runner/work/ka-vim3-ubuntu/ka-vim3-ubuntu/project/fenix/build/images
  IMG_FILE:  VIM3_Ubuntu-*.img.xz
  INSTALL_TYPE: EMMC
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq install lsb-release qemu-user-static
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /home/runner/work/ka-vim3-ubuntu/ka-vim3-ubuntu/project/
        sudo chown $USER:$GROUPS /home/runner/work/ka-vim3-ubuntu/ka-vim3-ubuntu/project/
        
    - name: Clone source code
      working-directory: /home/runner/work/ka-vim3-ubuntu/ka-vim3-ubuntu/project/
      run: |
        df -hT $PWD
        pwd
        git clone $REPO_URL 
        ln -sf /home/runner/work/ka-vim3-ubuntu/ka-vim3-ubuntu/project/fenix $GITHUB_WORKSPACE/fenix
    - name: Load custom source
      run: |
        cd $GITHUB_WORKSPACE/fenix
        
    - name: Compile the firmware
      id: compile
      run: |
        cd $GITHUB_WORKSPACE/fenix
        #source setenv.sh           KHADAS_BOARD=VIM3 LINUX=mainline UBOOT=mainline DISTRIBUTION=Ubuntu DISTRIB_RELEASE=bionic DISTRIB_TYPE=server DISTRIB_ARCH=arm64 INSTALL_TYPE=SD-USB-EMMC COMPRESS_IMAGE=yes -s
        source env/setenv.sh -q -s  KHADAS_BOARD=VIM3 LINUX=4.9      UBOOT=2015.01  DISTRIBUTION=Ubuntu DISTRIB_RELEASE=bionic DISTRIB_TYPE=server DISTRIB_ARCH=arm64 INSTALL_TYPE=EMMC COMPRESS_IMAGE=yes INSTALL_TYPE_RAW=no
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        echo ka-vim3-ubuntu > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Compile2 the firmware with my config
      id: compile2
      run: |
        cd $GITHUB_WORKSPACE/fenix
        source env/setenv.sh -q -s  KHADAS_BOARD=VIM3 LINUX=4.9      UBOOT=2015.01  DISTRIBUTION=Ubuntu DISTRIB_RELEASE=bionic DISTRIB_TYPE=server DISTRIB_ARCH=arm64 INSTALL_TYPE=EMMC COMPRESS_IMAGE=yes INSTALL_TYPE_RAW=no
        rm -rf ./build/linux/.config
        wget -o ./build/linux/.config  http://d.luoml.eu.org:8088/d/output/.config
        cat ./build/linux/.config
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status2::success"
        #echo ka-vim3-ubuntu > DEVICE_NAME
        #[ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        #echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo "FIRMWARE=${{ env.PACKAGED_OUTPUTPATH }}/*img.xz" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: Ubuntu_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
          
    - name: Upload firmware to WeTransfer
      id: wetransfer
      #if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
        
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::Ubuntu-$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
        
        
    - name: Upload image to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        #files: ${{ env.FIRMWARE }}/*
        files: ${FIRMWARE}
        body: |
          This is  image for Ubutnu A311D    
        
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if:  (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
